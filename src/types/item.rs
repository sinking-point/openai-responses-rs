use super::{APIInputMessage, Role};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Content items generated by the model.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum OutputItem {
    /// An output message from the model.
    Message(OutputMessage),
    /// The results of a file search tool call. See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
    #[serde(rename = "file_search_call")]
    FileSearch(FileSearchCall),
    /// A tool call to run a function. See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
    FunctionCall(FunctionCall),
    /// The results of a web search tool call. See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
    #[serde(rename = "web_search_call")]
    WebSearchResults(WebSearchCall),
    /// A tool call to a computer use tool. See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
    #[serde(rename = "computer_call")]
    ComputerToolCall(ComputerToolCall),
    /// A tool call to generate an image. See the [image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.
    #[serde(rename = "image_generation_call")]
    ImageGeneration(ImageGenerationCall),
    /// A description of the chain of thought used by a reasoning model while generating a response.
    Reasoning(Reasoning),
}

/// An item representing part of the context for the response to be generated by the model.
///
/// Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum InputItem {
    /// A message input to the model with a role indicating instruction following hierarchy.
    ///
    /// Instructions given with the `Developer` or `System` role take precedence over instructions given with the `User` role.
    #[serde(rename = "message")]
    InputMessage(APIInputMessage),
    /// An output message from the model.
    #[serde(rename = "message")]
    OutputMessage(OutputMessage),
    /// The results of a file search tool call.
    ///
    /// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
    #[serde(rename = "file_search_call")]
    FileSearch(FileSearchCall),
    /// A tool call to a computer use tool.
    ///
    /// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
    #[serde(rename = "computer_call")]
    ComputerToolCall(ComputerToolCall),
    /// The output of a computer tool call.
    #[serde(rename = "computer_call_output")]
    ComputerToolCallOutput(ComputerToolCallOutput),
    /// The results of a web search tool call.
    ///
    /// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
    #[serde(rename = "web_search_call")]
    WebSearchResults(WebSearchCall),
    /// A tool call to generate an image. See the [image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.
    #[serde(rename = "image_generation_call")]
    ImageGeneration(ImageGenerationCall),
    /// A tool call to run a function.
    ///
    /// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
    FunctionCall(FunctionCall),
    /// The output of a function tool call.
    FunctionCallOutput(FunctionCallOutput),
    /// A description of the chain of thought used by a reasoning model while generating a response.
    Reasoning(Reasoning),
}

/// An output message from the model.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OutputMessage {
    /// The content of the output message.
    pub content: Vec<OutputContent>,
    /// The unique ID of the output message.
    pub id: String,
    /// The role of the output message. Always `Assistant`.
    pub role: Role,
    /// The status of the message input.
    pub status: MessageStatus,
}

/// The content of the output message.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum OutputContent {
    /// A text output from the model.
    #[serde(rename = "output_text")]
    Text {
        /// The text output from the model.
        text: String,
        /// The annotations of the text output.
        annotations: Vec<Annotation>,
    },
    /// A refusal from the model.
    Refusal {
        /// The refusal explanation from the model.
        refusal: String,
    },
}

/// An annotation of the text output.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum Annotation {
    /// A citation to a file.
    FileCitation {
        /// The ID of the file.
        file_id: String,
        /// The index of the file in the list of files.
        index: u64,
    },
    #[serde(rename = "url_citation")]
    /// A citation for a web resource used to generate a model response.
    URLCitation {
        /// The index of the last character of the URL citation in the message.
        end_index: u64,
        /// The index of the first character of the URL citation in the message.
        start_index: u64,
        /// The title of the web resource.
        title: String,
        /// The URL of the web resource.
        url: String,
    },
    /// A path to a file.
    FilePath {
        /// The ID of the file.
        file_id: String,
        /// The index of the file in the list of files.
        index: u64,
    },
}

/// The status of a message.
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum MessageStatus {
    InProgress,
    Completed,
    Incomplete,
}

/// The results of a file search tool call.
///
/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FileSearchCall {
    /// The unique ID of the file search tool call.
    pub id: String,
    /// The queries used to search for files.
    pub queries: Vec<String>,
    /// The status of the file search tool call.
    pub status: FileSearchStatus,
    /// The results of the file search tool call.
    pub results: Option<Vec<FileSearchResult>>,
}

/// A result of the file search tool call.
///
/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FileSearchResult {
    /// Set of 16 key-value pairs that can be attached to an object.
    ///
    /// This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
    /// Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters, booleans, or numbers.
    pub attributes: HashMap<String, String>,
    /// The unique ID of the file.
    pub file_id: String,
    /// The name of the file.
    pub filename: String,
    /// The relevance score of the file - a value between 0 and 1.
    pub score: f32,
    /// The text that was retrieved from the file.
    pub text: String,
}

/// The status of the file search tool call.
///
/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum FileSearchStatus {
    Completed,
    InProgress,
    Searching,
    Incomplete,
    Failed,
}

/// A tool call to run a function.
///
/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FunctionCall {
    /// A JSON string of the arguments to pass to the function.
    pub arguments: String,
    /// The unique ID of the function tool call generated by the model.
    pub call_id: String,
    /// The unique ID of the function tool call.
    pub id: Option<String>,
    /// The name of the function to run.
    pub name: String,
    /// The status of the item.
    pub status: Option<FunctionCallStatus>,
}

/// The status of the function call.
///
/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum FunctionCallStatus {
    InProgress,
    Completed,
    Incomplete,
}

/// The output of a function call.
///
/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FunctionCallOutput {
    /// The unique ID of the function tool call output. Populated when this item is returned via API.
    pub id: Option<String>,
    /// The status of the item. Populated when items are returned via API.
    pub status: Option<FunctionCallStatus>,
    /// The ID of the computer tool call that produced the output.
    pub call_id: String,
    /// A JSON string of the output of the function tool call.
    pub output: String,
}

/// A tool call to run a web search.
///
/// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WebSearchCall {
    /// The unique ID of the web search tool call.
    pub id: String,
    /// The status of the web search tool call.
    pub status: String,
}

/// A tool call to run a computer action.
///
/// See the [computer action guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ComputerToolCall {
    /// The action to execute.
    pub action: ComputerAction,
    /// The unique ID of the computer call.
    pub call_id: String,
    /// The pending safety checks for the computer call.
    pub pending_safety_checks: Vec<SafetyCheck>,
    /// The status of the item.
    pub status: ComputerCallStatus,
}

/// The action of the computer call.
///
/// See the [computer action guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum ComputerAction {
    /// A click action.
    Click {
        /// Indicates which mouse button was pressed during the click.
        button: ClickButton,
        /// The x-coordinate where the click occurred.
        x: u64,
        /// The y-coordinate where the click occurred.
        y: u64,
    },
    /// A double click action.
    DoubleClick {
        /// The x-coordinate where the double click occurred.
        x: u64,
        /// The y-coordinate where the double click occurred.
        y: u64,
    },
    /// A drag action.
    Drag {
        /// An array of coordinates representing the path of the drag action.
        path: Vec<DragCoordinate>,
    },
    #[serde(rename = "keypress")]
    KeyPress {
        /// The combination of keys the model is requesting to be pressed.
        keys: Vec<String>,
    },
    /// A mouse move action.
    Move {
        /// The x-coordinate to move to.
        x: u64,
        /// The y-coordinate to move to.
        y: u64,
    },
    /// A screenshot action.
    Screenshot,
    /// A scroll action.
    Scroll {
        /// The horizontal scroll distance.
        scroll_x: u64,
        /// The vertical scroll distance.
        scroll_y: u64,
        /// The x-coordinate where the scroll occurred.
        x: u64,
        /// The y-coordinate where the scroll occurred.
        y: u64,
    },
    /// An action to type in text.
    Type {
        /// The text to type.
        text: String,
    },
    /// A wait action.
    Wait,
}

/// Indicates which mouse button was pressed during the click.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum ClickButton {
    Left,
    Right,
    Wheel,
    Back,
    Forward,
}

/// Represents a coordinate in a drag action.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DragCoordinate {
    /// The x-coordinate of the drag action.
    pub x: u64,
    /// The y-coordinate of the drag action.
    pub y: u64,
}

/// Represents a pending safety check for a computer use call.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SafetyCheck {
    /// The type of the pending safety check.
    pub code: String,
    /// The ID of the pending safety check.
    pub id: String,
    /// Details about the pending safety check.
    pub message: String,
}

/// The status of the computer use call.
///
/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum ComputerCallStatus {
    InProgress,
    Completed,
    Incomplete,
}

/// The output of a computer use call.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ComputerToolCallOutput {
    /// The ID of the computer tool call output. Populated when this item is returned via API.
    pub id: Option<String>,
    /// The status of the item. Populated when items are returned via API.
    pub status: Option<ComputerCallStatus>,
    /// The ID of the computer tool call that produced the output.
    pub call_id: String,
    /// A computer screenshot image used with the computer use tool.
    pub output: ComputerCallOutput,
    /// The safety checks reported by the API that have been acknowledged by the developer.
    pub acknowledged_safety_checks: Option<Vec<SafetyCheck>>,
}

/// A computer screenshot image used with the computer use tool.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum ComputerCallOutput {
    /// A computer screenshot image used with the computer use tool.
    #[serde(rename = "computer_screenshot")]
    Screenshot {
        /// The identifier of an uploaded file that contains the screenshot.
        file_id: Option<String>,
        /// The URL of the screenshot image.
        image_url: Option<String>,
    },
}

/// A tool call to generate an image.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub struct ImageGenerationCall {
    /// The unique ID of the image generation tool call.
    pub id: String,
    /// The generated image encoded in base64.
    pub result: Option<String>,
    /// The status of the image generation tool call.
    pub status: ImageGenerationStatus,
}

/// The status of the image generation tool call.
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum ImageGenerationStatus {
    Completed,
    Failed,
    InProgress,
    Cancelled,
    Queued,
    Incomplete,
}

/// A description of the chain of thought used by a reasoning model while generating a response.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Reasoning {
    /// The unique identifier of the reasoning content.
    pub id: String,
    /// Reasoning text contents.
    pub summary: Vec<ReasoningSummary>,
    /// The status of the item.
    pub status: ReasoningStatus,
}

/// Reasoning text contents.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum ReasoningSummary {
    #[serde(rename = "summary_text")]
    Text {
        /// A short summary of the reasoning used by the model when generating the response.
        text: String,
    },
}

/// The status of the reasoning data.
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum ReasoningStatus {
    InProgress,
    Completed,
    Incomplete,
}
